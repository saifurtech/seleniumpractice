{"version":3,"sources":["component/TodoListComponent.js","App.js","serviceWorker.js","index.js"],"names":["TodoListComponent","classes","this","props","List","className","root","map","value","labelId","ListItem","key","role","undefined","dense","button","ListItemIcon","Checkbox","edge","tabIndex","disableRipple","inputProps","ListItemText","id","primary","ListItemSecondaryAction","IconButton","aria-label","React","Component","withStyles","theme","width","maxWidth","backgroundColor","palette","background","paper","useStyles","makeStyles","flexGrow","height","control","padding","spacing","menuButton","marginRight","title","gridStyle","appBarStyle","App","AppBar","position","Toolbar","color","Typography","variant","Grid","container","justify","item","xs","Paper","ListSubheader","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qXAqBMA,E,iLACM,IACAC,EAAYC,KAAKC,MAAjBF,QACR,OACE,kBAACG,EAAA,EAAD,CAAMC,UAAWJ,EAAQK,MACtB,CAAC,EAAG,EAAG,EAAG,GAAGC,KAAI,SAAAC,GAChB,IAAMC,EAAO,8BAA0BD,GAEvC,OACE,kBAACE,EAAA,EAAD,CAAUC,IAAKH,EAAOI,UAAMC,EAAWC,OAAK,EAACC,QAAM,GACjD,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEC,KAAK,QAELC,UAAW,EACXC,eAAa,EACbC,WAAY,CAAE,kBAAmBZ,MAGrC,kBAACa,EAAA,EAAD,CAAcC,GAAId,EAASe,QAAO,oBAAehB,EAAQ,KACzD,kBAACiB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYR,KAAK,MAAMS,aAAW,YAChC,kBAAC,IAAD,iB,GAtBcC,IAAMC,WAgCvBC,eAxCG,SAAAC,GAAK,MAAK,CAC1BzB,KAAM,CACJ0B,MAAO,OACPC,SAAU,IACVC,gBAAiBH,EAAMI,QAAQC,WAAWC,UAoC/BP,CAAsB9B,G,yECrC/BsC,EAAYC,aAAW,SAAAR,GAAK,MAAK,CACrCzB,KAAM,CACJkC,SAAU,GAEZH,MAAO,CACLI,OAAQ,IACRT,MAAO,KAETU,QAAS,CACPC,QAASZ,EAAMa,QAAQ,IAEzBC,WAAY,CACVC,YAAaf,EAAMa,QAAQ,IAE7BG,MAAO,CACLP,SAAU,GAEZQ,UAAW,CACTd,gBAAiB,YAEnBe,YAAa,CACXf,gBAAiB,cAkDNgB,MA9Cf,WACE,IAAMjD,EAAUqC,IAEhB,OACE,oCACE,kBAACa,EAAA,EAAD,CAAQC,SAAS,SAAS/C,UAAWJ,EAAQgD,aAC3C,kBAACI,EAAA,EAAD,KACE,kBAAC3B,EAAA,EAAD,CACER,KAAK,QACLb,UAAWJ,EAAQ4C,WACnBS,MAAM,UACN3B,aAAW,QAEX,kBAAC,IAAD,OAEF,kBAAC4B,EAAA,EAAD,CAAYC,QAAQ,KAAKnD,UAAWJ,EAAQ8C,OAA5C,kBAMJ,6BACA,kBAACU,EAAA,EAAD,CAAMC,WAAS,EAACrD,UAAWJ,EAAQK,KAAMsC,QAAS,EAAGe,QAAQ,UAC3D,kBAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGxD,UAAWJ,EAAQ+C,WACnC,kBAACc,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,aACA,kBAAC,EAAD,QAGJ,kBAACN,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGxD,UAAWJ,EAAQ+C,WACnC,kBAACc,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,oBACA,kBAAC,EAAD,QAGJ,kBAACN,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGxD,UAAWJ,EAAQ+C,WACnC,kBAACc,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,aACA,kBAAC,EAAD,WCnEQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.104a4148.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {\r\n  List,\r\n  ListItem,\r\n  ListItemIcon,\r\n  Checkbox,\r\n  ListItemText,\r\n  ListItemSecondaryAction,\r\n  IconButton,\r\n  withStyles\r\n} from \"@material-ui/core\";\r\nimport CommentIcon from \"@material-ui/icons/Comment\";\r\n\r\nconst useStyles = theme => ({\r\n  root: {\r\n    width: \"100%\",\r\n    maxWidth: 360,\r\n    backgroundColor: theme.palette.background.paper\r\n  },\r\n});\r\n\r\nclass TodoListComponent extends React.Component {\r\n  render() {\r\n    const { classes } = this.props;\r\n    return (\r\n      <List className={classes.root}>\r\n        {[0, 1, 2, 3].map(value => {\r\n          const labelId = `checkbox-list-label-${value}`;\r\n\r\n          return (\r\n            <ListItem key={value} role={undefined} dense button>\r\n              <ListItemIcon>\r\n                <Checkbox\r\n                  edge=\"start\"\r\n                  /**checked={checked.indexOf(value) !== -1}**/\r\n                  tabIndex={-1}\r\n                  disableRipple\r\n                  inputProps={{ \"aria-labelledby\": labelId }}\r\n                />\r\n              </ListItemIcon>\r\n              <ListItemText id={labelId} primary={`Line item ${value + 1}`} />\r\n              <ListItemSecondaryAction>\r\n                <IconButton edge=\"end\" aria-label=\"comments\">\r\n                  <CommentIcon />\r\n                </IconButton>\r\n              </ListItemSecondaryAction>\r\n            </ListItem>\r\n          );\r\n        })}\r\n      </List>\r\n    );\r\n  }\r\n}\r\nexport default withStyles(useStyles)(TodoListComponent);\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport TodoListComponent from \"./component/TodoListComponent\";\r\nimport {\r\n  Grid,\r\n  makeStyles,\r\n  Paper,\r\n  ListSubheader,\r\n  AppBar,\r\n  Toolbar,\r\n  IconButton,\r\n  Typography,\r\n  Button\r\n} from \"@material-ui/core\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    flexGrow: 1\r\n  },\r\n  paper: {\r\n    height: 140,\r\n    width: 100\r\n  },\r\n  control: {\r\n    padding: theme.spacing(2)\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2)\r\n  },\r\n  title: {\r\n    flexGrow: 1\r\n  },\r\n  gridStyle: {\r\n    backgroundColor: \"Lavender\"\r\n  },\r\n  appBarStyle: {\r\n    backgroundColor: \"Orchid\"\r\n  }\r\n}));\r\n\r\nfunction App() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <>\r\n      <AppBar position=\"static\" className={classes.appBarStyle}>\r\n        <Toolbar>\r\n          <IconButton\r\n            edge=\"start\"\r\n            className={classes.menuButton}\r\n            color=\"inherit\"\r\n            aria-label=\"menu\"\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n            My TODO List\r\n          </Typography>\r\n          {/* <Button color=\"inherit\">Login</Button> */}\r\n        </Toolbar>\r\n      </AppBar>\r\n      <br />\r\n      <Grid container className={classes.root} spacing={2} justify=\"center\">\r\n        <Grid item xs={3} className={classes.gridStyle}>\r\n          <Paper>\r\n            <ListSubheader>TODO</ListSubheader>\r\n            <TodoListComponent />\r\n          </Paper>\r\n        </Grid>\r\n        <Grid item xs={3} className={classes.gridStyle}>\r\n          <Paper>\r\n            <ListSubheader>IN-PROGRESS</ListSubheader>\r\n            <TodoListComponent />\r\n          </Paper>\r\n        </Grid>\r\n        <Grid item xs={3} className={classes.gridStyle}>\r\n          <Paper>\r\n            <ListSubheader>DONE</ListSubheader>\r\n            <TodoListComponent />\r\n          </Paper>\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}